'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawn = spawn;
exports.exec = exec;

var _bluebird = require('bluebird');

var _child_process = require('child_process');

const debug = require('debug')('electron-windows-installer');

// Public: Maps a process's output into an {Observable}
//
// exe - The program to execute
// params - Arguments passed to the process
//
// Returns an {Observable} with a single value, that is the output of the
// spawned process
function spawn(exe, params, options) {
  return new _bluebird.Promise((resolve, reject) => {
    debug(`Spawning ${ exe } ${ params.join(' ') }`);
    const proc = (0, _child_process.spawn)(exe, params, Object.assign({
      stdio: debug.enabled ? 'inherit' : ['ignore', 'ignore', 'inherit']
    }, options));

    proc.on('error', reject);
    proc.on('close', code => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`${ exe } failed with exit code: ${ code }`));
      }
    });
  });
}

function exec(file, args, options) {
  if (debug.enabled) {
    debug(`Executing ${ file } ${ args == null ? '' : args.join(' ') }`);
  }

  return new _bluebird.Promise((resolve, reject) => {
    (0, _child_process.execFile)(file, args, Object.assign({ maxBuffer: 4 * 1024000 }, options), function (error, stdout, stderr) {
      if (error == null) {
        resolve(stdout);
      } else {
        if (stdout.length !== 0) {
          console.log(stdout);
        }
        if (stderr.length === 0) {
          reject(error);
        } else {
          reject(new Error(stderr + '\n' + error));
        }
      }
    });
  });
}