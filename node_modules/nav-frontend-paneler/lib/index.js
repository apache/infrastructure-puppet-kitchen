"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var PT = require("prop-types");
var React = require("react");
var classNames = require("classnames");
require("nav-frontend-paneler-style");
var cls = function cls(className, border) {
    return classNames('panel', className, {
        'panel--border': border
    });
};

var PanelBase = function (_React$Component) {
    _inherits(PanelBase, _React$Component);

    function PanelBase() {
        _classCallCheck(this, PanelBase);

        return _possibleConstructorReturn(this, (PanelBase.__proto__ || Object.getPrototypeOf(PanelBase)).apply(this, arguments));
    }

    _createClass(PanelBase, [{
        key: "render",
        value: function render() {
            var _props = this.props,
                children = _props.children,
                className = _props.className,
                border = _props.border,
                props = _objectWithoutProperties(_props, ["children", "className", "border"]);

            return React.createElement("div", Object.assign({ className: cls(className, border) }, props), children);
        }
    }]);

    return PanelBase;
}(React.Component);

PanelBase.defaultProps = {
    border: false
};
PanelBase.propTypes = {
    className: PT.string,
    children: PT.node.isRequired,
    border: PT.bool
};
PanelBase.defaultProps = {
    className: undefined,
    border: false
};
exports.default = PanelBase;
exports.Panel = function (props) {
    return React.createElement(PanelBase, Object.assign({ children: props.children }, props));
};
PanelBase.__docgenInfo = {"description":"","displayName":"PanelBase","props":{"children":{"defaultValue":null,"description":"Innhold","name":"children","required":true,"type":{"name":"string | number | boolean | {} | ReactElement<any> | ReactNodeArray | ReactPortal | ReactChildren..."}},"className":{"defaultValue":null,"description":"Egendefinert klassenavn","name":"className","required":false,"type":{"name":"string"}},"border":{"defaultValue":{"value":"false"},"description":"Hvis komponenten skal brukes på hvit bakgrunn kan denne brukes for å gi den en border","name":"border","required":false,"type":{"name":"boolean"}}}}